/* * ATM Example system - file Transaction.java * * copyright (c) 2001 - Russell C. Bjork * */package edu.gordon.atm;import edu.gordon.bank_proxy.Message;import edu.gordon.bank_simulation.Balances;import edu.gordon.bank_simulation.Receipt;import edu.gordon.common.Card;import edu.gordon.common.exceptions.Cancelled;/** Abstract base class for classes representing the various kinds of *  transaction the ATM can perform */public abstract class Transaction{    /** Constructor     *     *  @param atm the ATM used to communicate with customer     *  @param session the session in which this transaction is being performed     *  @param card the customer's card     *  @param pin the PIN entered by the customer     */    protected Transaction(ATM atm, Session session, Card card, int pin)    {        this.atm = atm;        this.session = session;        this.card = card;        this.pin = pin;        this.serialNumber = nextSerialNumber ++;        this.balances = new Balances();        state = GETTING_SPECIFICS_STATE;    }    /** Get serial number of this transaction     *     *  @return serial number     */    public int getSerialNumber()    {        return serialNumber;    }    /** Get specifics for the transaction from the customer - each     *  subclass must implement this appropriately.     *     *  @return message to bank for initiating this transaction     *  @exception Cancelled if customer cancelled this transaction     */    public abstract Message getSpecificsFromCustomer() throws Cancelled;    /** Complete an approved transaction  - each subclass must implement     *  this appropriately.     *     *  @return receipt to be printed for this transaction     *  @exception Cancelled if customer cancelled this transaction     */    public abstract Receipt completeTransaction() throws Cancelled;    // Instance variables    /** ATM to use for communication with the customer     */    protected ATM atm;    /** Session in which this transaction is being performed     */    protected Session session;    /** Customer card for the session this transaction is part of     */    protected Card card;    /** PIN entered or re-entered by customer     */    protected int pin;    /** Serial number of this transaction     */    protected int serialNumber;    /** Message to bank describing this transaction     */    protected Message message;    /** Used to return account balances from the bank     */    protected Balances balances;    public Balances getBalances() {		return balances;	}	/** List of available transaction types to display as a menu     */    public static final String [] TRANSACTION_TYPES_MENU =        { "Withdrawal", "Deposit", "Transfer", "Balance Inquiry" };    /** Next serial number - used to assign a unique serial number to     *  each transaction     */    private static int nextSerialNumber = 1;    /** The current state of the transaction     */    private int state;    // Possible values for state    /** Getting specifics of the transaction from customer     */    public static final int GETTING_SPECIFICS_STATE = 1;    /** Sending transaction to bank     */    public static final int SENDING_TO_BANK_STATE = 2;    /** Performing invalid PIN extension     */    public static final int INVALID_PIN_STATE = 3;    /** Completing transaction     */    public static final int COMPLETING_TRANSACTION_STATE = 4;    /** Printing receipt     */    public static final int PRINTING_RECEIPT_STATE = 5;    /** Asking if customer wants to do another transaction     */    public static final int ASKING_DO_ANOTHER_STATE = 6;}