/* * ATM Example system - file ATM.java * * copyright (c) 2001 - Russell C. Bjork * */package edu.gordon.atm;import java.net.InetAddress;import com.google.common.eventbus.Subscribe;import edu.gordon.bank_proxy.Message;import edu.gordon.bank_simulation.Receipt;import edu.gordon.bank_simulation.Status;import edu.gordon.common.Card;import edu.gordon.common.Money;import edu.gordon.common.StatusEventBus;import edu.gordon.common.events.CardInsertedEvent;import edu.gordon.common.events.TurnOffEvent;import edu.gordon.common.events.TurnOnEvent;import edu.gordon.common.exceptions.Cancelled;import edu.gordon.common.exceptions.CardRetained;import edu.gordon.io_proxy.CardReader;import edu.gordon.io_proxy.CashDispenser;import edu.gordon.io_proxy.Context;import edu.gordon.io_proxy.CustomerConsole;import edu.gordon.io_proxy.EnvelopeAcceptor;import edu.gordon.io_proxy.Log;import edu.gordon.io_proxy.NetworkToBank;import edu.gordon.io_proxy.OperatorPanel;import edu.gordon.io_proxy.ReceiptPrinter;/** Representation for the ATM itself.  An object of this class "owns" *  the objects representing the component parts of the ATM, and the *  communications network, and is responsible for creating customer *  sessions which then use it to gain access to the component parts. *  This is an active class - when an instance of the class is created, *  a thread is executed that actually runs the system. */public class ATM implements Runnable{    /** Constructor     *     *  @param id the unique ID for this ATM     *  @param place the physical location of this ATM     *  @param bankName the name of the bank owning this ATM     *  @param bankAddress the Internet address of the bank     *  @param context the atm's context     */    public ATM(int id, String place, String bankName, InetAddress bankAddress, Context context)    {        this.id = id;        this.place = place;        this.bankName = bankName;        this.bankAddress = bankAddress;        // Create objects corresponding to component parts        log = new Log(context);        cardReader = new CardReader(context);        cashDispenser = new CashDispenser(log, context);        customerConsole = new CustomerConsole(context);        envelopeAcceptor = new EnvelopeAcceptor(log, context);        networkToBank = new NetworkToBank(log, bankAddress, context);        operatorPanel = new OperatorPanel(context);        receiptPrinter = new ReceiptPrinter(context);        // Register the atm to the evenbus        StatusEventBus.getInstance().registerToEventBus(this);    }    // Methods corresponding to major responsibilities of the ATM    /** The main program/applet will create a Thread that executes     *  this code.     */    public void run()    {    	turnOff();        while (true)        {        	try {				Thread.sleep(400000);			} catch (InterruptedException e) {				e.printStackTrace();			}        }    }    private void turnOff(){    	customerConsole.display("Not currently available");    	performShutdown();    }    @Subscribe    public void onTurnOff(TurnOffEvent e) {    	turnOff();    }    @Subscribe    public void onTurnOn(TurnOnEvent e) {    	performStartup();    	customerConsole.display("Please insert your card");    }    @Subscribe    public void onCardInserted(CardInsertedEvent e) {    	Session currentSession = new Session(this);    	currentSession.performSession();    }    /** Create a transaction of an appropriate type by asking the customer     *  what type of transaction is desired and then returning a newly-created     *  member of the appropriate subclass     *     *  @param session the session in which this transaction is being performed     *  @param card the customer's card     *  @param pin the PIN entered by the customer     *  @return a newly created Transaction object of the appropriate type     *  @exception Cancelled if the customer presses cancel instead     *         of choosing a transaction type     */    public Transaction makeTransaction(Session session,                                              Card card, int pin)                                throws Cancelled    {        int choice = customerConsole.readMenuChoice(                "Please choose transaction type", Transaction.TRANSACTION_TYPES_MENU);        switch(choice)        {            case 0:                return new Withdrawal(this, session, card, pin);            case 1:                return new Deposit(this, session, card, pin);            case 2:                return new Transfer(this, session, card, pin);            case 3:                return new Inquiry(this, session, card, pin);            default:                return null;    // To keep compiler happy - should not happen!        }    }    /** Peform a transaction.  This method depends on the three abstract methods     *  that follow to perform the operations unique to each type of transaction     *  in the appropriate way.     *     *  @param transaction the transaction to be performed     *  @return true if customer indicates a desire to do another transaction;     *          false if customer does not desire to do another transaction     *  @exception CardRetained if card was retained due to too many invalid PIN's     */    public boolean performTransaction(Transaction transaction) throws CardRetained    {        String doAnotherMessage = "";        Status status = null;        Receipt receipt = null;        Message message = null;        int transactionState = Transaction.GETTING_SPECIFICS_STATE;        while (true)    // Terminates by return in ASKING_DO_ANOTHER_STATE or exception        {            switch(transactionState)            {                case Transaction.GETTING_SPECIFICS_STATE:                    try                    {                        message = transaction.getSpecificsFromCustomer();                        customerConsole.display("");                        transactionState = Transaction.SENDING_TO_BANK_STATE;                    }                    catch(Cancelled e)                    {                        doAnotherMessage = "Last transaction was cancelled";                        transactionState = Transaction.ASKING_DO_ANOTHER_STATE;                    }                    break;                case Transaction.SENDING_TO_BANK_STATE:                    status = networkToBank.sendMessage(message, transaction.getBalances());                    if (status.isInvalidPIN())                        transactionState = Transaction.INVALID_PIN_STATE;                    else if (status.isSuccess())                        transactionState = Transaction.COMPLETING_TRANSACTION_STATE;                    else                    {                        doAnotherMessage = status.getMessage();                        transactionState = Transaction.ASKING_DO_ANOTHER_STATE;                    }                    break;                case Transaction.COMPLETING_TRANSACTION_STATE:                    try                    {                        receipt = transaction.completeTransaction();                        transactionState = Transaction.PRINTING_RECEIPT_STATE;                    }                    catch(Cancelled e)                    {                        doAnotherMessage = "Last transaction was cancelled";                        transactionState = Transaction.ASKING_DO_ANOTHER_STATE;                    }                    break;                case Transaction.PRINTING_RECEIPT_STATE:                    getReceiptPrinter().printReceipt(receipt);                    transactionState = Transaction.ASKING_DO_ANOTHER_STATE;                    break;                case Transaction.ASKING_DO_ANOTHER_STATE:                    if (doAnotherMessage.length() > 0)                        doAnotherMessage += "\n";                    try                    {                        String [] yesNoMenu = { "Yes", "No" };                        boolean doAgain = customerConsole.readMenuChoice(                            doAnotherMessage +                            "Would you like to do another transaction?",                            yesNoMenu) == 0;                        return doAgain;                    }                    catch(Cancelled e)                    {                        return false;                    }            }        }    }    // The following methods allow objects of other classes to access component    // parts of the ATM    /** Accessor for id     *     *  @return unique id of this ATM     */    public int getID()    {        return id;    }    /** Accessor for place     *     *  @return physical location of this ATM     */    public String getPlace()    {        return place;    }    /** Accessor for bank name     *     *  @return name of bank owning this ATM     */    public String getBankName()    {        return bankName;    }    /** Accessor for card reader     *     *  @return card reader component of this ATM     */    public CardReader getCardReader()    {        return cardReader;    }    /** Accessor for cash dispenser     *     *  @return cash dispenser component of this ATM     */    public CashDispenser getCashDispenser()    {        return cashDispenser;    }    /** Accessor for customer console     *     *  @return customer console component of this ATM     */    public CustomerConsole getCustomerConsole()    {        return customerConsole;    }    /** Accessor for envelope acceptor     *     *  @return envelope acceptor component of this ATM     */    public EnvelopeAcceptor getEnvelopeAcceptor()    {        return envelopeAcceptor;    }    /** Accessor for log     *     *  @return log component of this ATM     */    public Log getLog()    {        return log;    }    /** Accessor for network to bank     *     *  @return network connection to bank of this ATM     */    public NetworkToBank getNetworkToBank()    {        return networkToBank;    }    /** Accessor for operator panel     *     *  @return operator panel component of this ATM     */    public OperatorPanel getOperatorPanel()    {        return operatorPanel;    }    /** Accessor for receipt printer     *     *  @return receipt printer component of this ATM     */    public ReceiptPrinter getReceiptPrinter()    {        return receiptPrinter;    }    // Private methods    /** Perform the System Startup use case when switch is turned on     */    private void performStartup()    {        Money initialCash = operatorPanel.getInitialCash();        cashDispenser.setInitialCash(initialCash);        networkToBank.openConnection();    }    /** Perform the System Shutdown use case when switch is turned off     */    private void performShutdown()    {        networkToBank.closeConnection();    }    public InetAddress getBankAdress()    {        return bankAddress;    }    // Instance variables recording information about the ATM    /** Unique ID for this ATM     */    private int id;    /** Physical location of this ATM     */    private String place;    /** Name of the bank owning this ATM     */    private String bankName;    /** Internet address of the bank     */    private InetAddress bankAddress;    // Instance variables referring to the omponent parts of the ATM    /** The ATM's card reader     */    private CardReader cardReader;    /** The ATM's cash dispenser     */    private CashDispenser cashDispenser;    /** The ATM's customer console     */    private CustomerConsole customerConsole;    /** The ATM's envelope acceptor     */    private EnvelopeAcceptor envelopeAcceptor;    /** The ATM's log     */    private Log log;    /** The ATM's network connection to the bank     */    private NetworkToBank networkToBank;    /** The ATM's operator panel     */    private OperatorPanel operatorPanel;    /** The ATM's receipt printer     */    private ReceiptPrinter receiptPrinter;}