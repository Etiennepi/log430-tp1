/* * ATM Example system - file Session.java * * copyright (c) 2001 - Russell C. Bjork * */package edu.gordon.atm;import edu.gordon.bank_proxy.Message;import edu.gordon.bank_simulation.Balances;import edu.gordon.bank_simulation.Status;import edu.gordon.common.Card;import edu.gordon.common.Money;import edu.gordon.common.exceptions.Cancelled;import edu.gordon.common.exceptions.CardRetained;/** Representation for one ATM session serving a single customer. */public class Session{    /** Constructor     *     *  @param atm the ATM on which the session is performed     */    public Session(ATM atm)    {        this.atm = atm;        state = READING_CARD_STATE;    }    /** Perform the Session Use Case     */    public void performSession()    {        Card card = null;        Transaction currentTransaction = null;        while (state != FINAL_STATE)        {            switch(state)            {                case READING_CARD_STATE:                    card = atm.getCardReader().readCard();                    if (card != null)                        state = READING_PIN_STATE;                    else                    {                        atm.getCustomerConsole().display("Unable to read card");                        state = EJECTING_CARD_STATE;                    }                    break;                case READING_PIN_STATE:                    try                    {                        Message message = null;                        Status pinStatus = null;                        pin = askPin();                        message = new Message(Message.PIN_CHECK, card, pin, 0, -1, -1, new Money(0));                        pinStatus = isCorrectPin(message);                        if(pinStatus.isInvalidPIN()){                            performInvalidPINExtension(message);                        }                        state = CHOOSING_TRANSACTION_STATE;                    }                    catch(Cancelled e)                    {                        state = EJECTING_CARD_STATE;                    } catch (CardRetained e) {                        e.printStackTrace();                    }                    break;                case CHOOSING_TRANSACTION_STATE:                    try                    {                        currentTransaction =                            atm.makeTransaction(this, card, pin);                        state = PERFORMING_TRANSACTION_STATE;                    }                    catch(Cancelled e)                    {                        state = EJECTING_CARD_STATE;                    }                    break;                case PERFORMING_TRANSACTION_STATE:                    try                    {                        boolean doAgain =                            atm.performTransaction(currentTransaction);                        if (doAgain)                            state = CHOOSING_TRANSACTION_STATE;                        else                            state = EJECTING_CARD_STATE;                    }                    catch(CardRetained e)                    {                        state = FINAL_STATE;                    }                    break;                case EJECTING_CARD_STATE:                    atm.getCardReader().ejectCard();                    state = FINAL_STATE;                    break;            }        }    }    /** Perform the Invalid PIN Extension - reset session pin to new value if successful    *    *  @return status code returned by bank from most recent re-submission    *          of transaction    *  @exception Cancelled if customer presses the CANCEL key    *             instead of re-entering PIN    *  @exception CardRetained if card was retained due to too many invalid PIN's    */   public int performInvalidPINExtension(Message message) throws Cancelled,                                                     CardRetained   {       Status status = null;       for (int i = 0; i < 3; i ++)       {           pin = atm.getCustomerConsole().readPIN(               "PIN was incorrect\nPlease re-enter your PIN\n" +               "Then press ENTER");           atm.getCustomerConsole().display("");           message.setPIN(pin);           status = atm.getNetworkToBank().sendMessage(message, new Balances());           if (! status.isInvalidPIN())           {               return pin;           }       }       atm.getCardReader().retainCard();       atm.getCustomerConsole().display(           "Your card has been retained\nPlease contact the bank.");       try       {           Thread.sleep(5000);       }       catch(InterruptedException e)       { }       atm.getCustomerConsole().display("");       throw new CardRetained();   }    /** Change the pin recorded for the customer (if invalid pin extension     *  was performed by a transaction     *     *  @param pin the newly entered pin     */    public void setPIN(int pin)    {        this.pin = pin;    }    private Status isCorrectPin(Message message){        return atm.getNetworkToBank().sendMessage(message, new Balances());    }    private int askPin() throws Cancelled{        return atm.getCustomerConsole().readPIN(                "Please enter your PIN\n" +                "Then press ENTER");    }    // Instance variables    /** The ATM on which the session is performed     */    private ATM atm;    /** The PIN entered (or re-entered) by the customer     */    private int pin;    /** The current state of the session     */    private int state;    // Possible values for state    /** Reading the customer's card     */    private static final int READING_CARD_STATE = 1;    /** Asking the customer to enter a PIN     */    private static final int READING_PIN_STATE = 2;    /** Asking the customer to choose a transaction type     */    private static final int CHOOSING_TRANSACTION_STATE = 3;    /** Peforming a transaction     */    private static final int PERFORMING_TRANSACTION_STATE = 4;    /** Ejecting the customer's card     */    private static final int EJECTING_CARD_STATE = 5;    /** Session finished     */    private static final int FINAL_STATE = 6;}